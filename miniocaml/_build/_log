### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends # cached
# Target: eval.ml.depends, tags: { extension:ml, file:eval.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules eval.ml > eval.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o ast.cmo ast.ml # cached
# Target: value.ml.depends, tags: { extension:ml, file:value.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules value.ml > value.ml.depends # cached
# Target: value.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:value.cmo, file:value.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o value.cmo value.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml # cached
# Target: print_expr.ml.depends, tags: { extension:ml, file:print_expr.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules print_expr.ml > print_expr.ml.depends # cached
# Target: print_expr.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:print_expr.cmo, file:print_expr.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o print_expr.cmo print_expr.ml # cached
# Target: print_val.ml.depends, tags: { extension:ml, file:print_val.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules print_val.ml > print_val.ml.depends # cached
# Target: print_val.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:print_val.cmo, file:print_val.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o print_val.cmo print_val.ml # cached
# Target: eval.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:eval.cmo, file:eval.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o eval.cmo eval.ml
+ /usr/bin/ocamlc -c -o eval.cmo eval.ml
File "eval.ml", line 7, characters 11-12:
Warning 28: wildcard pattern given as argument to a constant constructor
File "eval.ml", line 14, characters 11-12:
Warning 28: wildcard pattern given as argument to a constant constructor
File "eval.ml", line 7, characters 16-276:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Val_closure (_, _), _)
File "eval.ml", line 14, characters 16-275:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(_, Val_closure (_, _))
File "eval.ml", line 21, characters 2-3:
Warning 11: this match case is unused.
File "eval.ml", line 50, characters 4-5:
Warning 11: this match case is unused.
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o main.cmo main.ml
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o ast.cmx ast.ml # cached
# Target: value.cmx, tags: { compile, extension:cmx, extension:ml, file:value.cmx, file:value.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o value.cmx value.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o lexer.cmx lexer.ml # cached
# Target: print_expr.cmx, tags: { compile, extension:cmx, extension:ml, file:print_expr.cmx, file:print_expr.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o print_expr.cmx print_expr.ml # cached
# Target: print_val.cmx, tags: { compile, extension:cmx, extension:ml, file:print_val.cmx, file:print_val.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o print_val.cmx print_val.ml # cached
# Target: eval.cmx, tags: { compile, extension:cmx, extension:ml, file:eval.cmx, file:eval.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o eval.cmx eval.ml
+ /usr/bin/ocamlopt -c -o eval.cmx eval.ml
File "eval.ml", line 7, characters 11-12:
Warning 28: wildcard pattern given as argument to a constant constructor
File "eval.ml", line 14, characters 11-12:
Warning 28: wildcard pattern given as argument to a constant constructor
File "eval.ml", line 7, characters 16-276:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Val_closure (_, _), _)
File "eval.ml", line 14, characters 16-275:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(_, Val_closure (_, _))
File "eval.ml", line 21, characters 2-3:
Warning 11: this match case is unused.
File "eval.ml", line 50, characters 4-5:
Warning 11: this match case is unused.
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt ast.cmx value.cmx eval.cmx parser.cmx lexer.cmx print_expr.cmx print_val.cmx main.cmx -o main.native
# Compilation successful.
